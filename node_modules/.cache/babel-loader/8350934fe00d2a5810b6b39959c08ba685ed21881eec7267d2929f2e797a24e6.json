{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import Search from \"../search\";\n// import CurrentWeather from \"../CurrentWeather\";\n// import Forecast from \"../Forecast\";\n// import { fetchWeatherData, fetchForecastData } from \"../api\";\n// import { useGeolocation } from \"../hooks/useGeolocation\";\n// import { useLocalStorage } from \"../hooks/useLocalStorage\";\n// import { motion, AnimatePresence } from \"framer-motion\";\n// import { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\n\n// export default function Weather() {\n//   const [search, setSearch] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [forecastData, setForecastData] = useState(null);\n//   const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n//   const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n//   const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n//   const [bgImage, setBgImage] = useState(\"\");\n//   const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true);\n//   const { latitude, longitude, error: geoError, getPosition } = useGeolocation();\n\n//   useEffect(() => {\n//     // Set background image based on time of day\n//     const hour = new Date().getHours();\n//     if (hour >= 6 && hour < 20) {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n//     } else {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     setIsGeolocationAvailable(!!navigator.geolocation);\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastSearched) {\n//       handleSearch(lastSearched);\n//     } else if (latitude && longitude) {\n//       handleGeolocation();\n//     }\n//   }, [latitude, longitude]);\n\n//   useEffect(() => {\n//     document.body.classList.toggle(\"dark-mode\", darkMode);\n//   }, [darkMode]);\n\n//   async function handleSearch(searchTerm) {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const weather = await fetchWeatherData(searchTerm, unit);\n//       setWeatherData(weather);\n//       const forecast = await fetchForecastData(searchTerm, unit);\n//       setForecastData(forecast);\n//       setLastSearched(searchTerm);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   async function handleGeolocation() {\n//     if (!isGeolocationAvailable) {\n//       setError(\"Geolocation is not supported by your browser\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       await getPosition();\n//       if (latitude && longitude) {\n//         const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n//         setWeatherData(weather);\n//         const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n//         setForecastData(forecast);\n//       } else {\n//         throw new Error(\"Unable to get your location\");\n//       }\n//     } catch (err) {\n//       setError(err.message || \"Error fetching weather data\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   function handleUnitToggle() {\n//     setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n//   }\n\n//   useEffect(() => {\n//     if (weatherData) {\n//       handleSearch(weatherData.name);\n//     }\n//   }, [unit]);\n\n//   return (\n//     <div className={`weather-app ${darkMode ? 'dark' : 'light'}`} style={{backgroundImage: `url(${bgImage})`}}>\n//       <motion.header\n//         initial={{ y: -50, opacity: 0 }}\n//         animate={{ y: 0, opacity: 1 }}\n//         transition={{ duration: 0.5 }}\n//       >\n//         <h1>Weather Insights</h1>\n//         <div className=\"header-buttons\">\n//           <motion.button\n//             className=\"mode-toggle\"\n//             onClick={() => setDarkMode(!darkMode)}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             {darkMode ? <FaSun /> : <FaMoon />}\n//           </motion.button>\n//           <motion.button\n//             className=\"unit-toggle\"\n//             onClick={handleUnitToggle}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             Switch to {unit === \"metric\" ? \"°F\" : \"°C\"}\n//           </motion.button>\n//         </div>\n//       </motion.header>\n//       <Search\n//         search={search}\n//         setSearch={setSearch}\n//         onSearch={handleSearch}\n//       />\n//       <motion.button\n//         className=\"geo-button\"\n//         onClick={handleGeolocation}\n//         disabled={!isGeolocationAvailable}\n//         whileHover={{ scale: 1.05 }}\n//         whileTap={{ scale: 0.95 }}\n//       >\n//         <FaMapMarkerAlt /> Use My Location\n//       </motion.button>\n//       <AnimatePresence>\n//         {loading && (\n//           <motion.div\n//             className=\"loading\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             Loading...\n//           </motion.div>\n//         )}\n//         {error && (\n//           <motion.div\n//             className=\"error\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             {error}\n//           </motion.div>\n//         )}\n//         {weatherData && !loading && !error && (\n//           <CurrentWeather data={weatherData} unit={unit} />\n//         )}\n//         {forecastData && !loading && !error && (\n//           <Forecast data={forecastData} unit={unit} />\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/home/vishnu/Desktop/Projects/react/weatherapp/src/components/weather/index.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Search from \"../search\";\n// import CurrentWeather from \"../CurrentWeather\";\n// import Forecast from \"../Forecast\";\n// import { fetchWeatherData, fetchForecastData } from \"../api\";\n// import { useGeolocation } from \"../hooks/useGeolocation\";\n// import { useLocalStorage } from \"../hooks/useLocalStorage\";\n// import { motion, AnimatePresence } from \"framer-motion\";\n// import { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\n\n// export default function Weather() {\n//   const [search, setSearch] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [forecastData, setForecastData] = useState(null);\n//   const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n//   const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n//   const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n//   const [bgImage, setBgImage] = useState(\"\");\n//   const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true);\n//   const { latitude, longitude, error: geoError, getPosition } = useGeolocation();\n\n//   useEffect(() => {\n//     // Set background image based on time of day\n//     const hour = new Date().getHours();\n//     if (hour >= 6 && hour < 20) {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n//     } else {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     setIsGeolocationAvailable(!!navigator.geolocation);\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastSearched) {\n//       handleSearch(lastSearched);\n//     } else if (latitude && longitude) {\n//       handleGeolocation();\n//     }\n//   }, [latitude, longitude]);\n\n//   useEffect(() => {\n//     document.body.classList.toggle(\"dark-mode\", darkMode);\n//   }, [darkMode]);\n\n//   async function handleSearch(searchTerm) {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const weather = await fetchWeatherData(searchTerm, unit);\n//       setWeatherData(weather);\n//       const forecast = await fetchForecastData(searchTerm, unit);\n//       setForecastData(forecast);\n//       setLastSearched(searchTerm);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   async function handleGeolocation() {\n//     if (!isGeolocationAvailable) {\n//       setError(\"Geolocation is not supported by your browser\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       await getPosition();\n//       if (latitude && longitude) {\n//         const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n//         setWeatherData(weather);\n//         const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n//         setForecastData(forecast);\n//       } else {\n//         throw new Error(\"Unable to get your location\");\n//       }\n//     } catch (err) {\n//       setError(err.message || \"Error fetching weather data\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   function handleUnitToggle() {\n//     setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n//   }\n\n//   useEffect(() => {\n//     if (weatherData) {\n//       handleSearch(weatherData.name);\n//     }\n//   }, [unit]);\n\n//   return (\n//     <div className={`weather-app ${darkMode ? 'dark' : 'light'}`} style={{backgroundImage: `url(${bgImage})`}}>\n//       <motion.header\n//         initial={{ y: -50, opacity: 0 }}\n//         animate={{ y: 0, opacity: 1 }}\n//         transition={{ duration: 0.5 }}\n//       >\n//         <h1>Weather Insights</h1>\n//         <div className=\"header-buttons\">\n//           <motion.button\n//             className=\"mode-toggle\"\n//             onClick={() => setDarkMode(!darkMode)}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             {darkMode ? <FaSun /> : <FaMoon />}\n//           </motion.button>\n//           <motion.button\n//             className=\"unit-toggle\"\n//             onClick={handleUnitToggle}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             Switch to {unit === \"metric\" ? \"°F\" : \"°C\"}\n//           </motion.button>\n//         </div>\n//       </motion.header>\n//       <Search\n//         search={search}\n//         setSearch={setSearch}\n//         onSearch={handleSearch}\n//       />\n//       <motion.button\n//         className=\"geo-button\"\n//         onClick={handleGeolocation}\n//         disabled={!isGeolocationAvailable}\n//         whileHover={{ scale: 1.05 }}\n//         whileTap={{ scale: 0.95 }}\n//       >\n//         <FaMapMarkerAlt /> Use My Location\n//       </motion.button>\n//       <AnimatePresence>\n//         {loading && (\n//           <motion.div\n//             className=\"loading\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             Loading...\n//           </motion.div>\n//         )}\n//         {error && (\n//           <motion.div\n//             className=\"error\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             {error}\n//           </motion.div>\n//         )}\n//         {weatherData && !loading && !error && (\n//           <CurrentWeather data={weatherData} unit={unit} />\n//         )}\n//         {forecastData && !loading && !error && (\n//           <Forecast data={forecastData} unit={unit} />\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}