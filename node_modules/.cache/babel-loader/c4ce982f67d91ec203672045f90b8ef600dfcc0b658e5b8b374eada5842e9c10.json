{"ast":null,"code":"var _jsxFileName = \"/home/vishnu/Desktop/Projects/react/weatherapp/src/components/weather/index.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import Search from \"../search\";\n// import CurrentWeather from \"../CurrentWeather\";\n// import Forecast from \"../Forecast\";\n// import { fetchWeatherData, fetchForecastData } from \"../api\";\n// import { useGeolocation } from \"../hooks/useGeolocation\";\n// import { useLocalStorage } from \"../hooks/useLocalStorage\";\n// import { motion, AnimatePresence } from \"framer-motion\";\n// import { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\n\n// export default function Weather() {\n//   const [search, setSearch] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [forecastData, setForecastData] = useState(null);\n//   const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n//   const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n//   const { latitude, longitude, error: geoError } = useGeolocation();\n//   const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n//   const [bgImage, setBgImage] = useState(\"\");\n//   const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true); \n//   useEffect(() => {\n//     // Set background image based on time of day\n//     const hour = new Date().getHours();\n//     if (hour >= 6 && hour < 20) {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n//     } else {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastSearched) {\n//       handleSearch(lastSearched);\n//     } else if (latitude && longitude) {\n//       handleGeolocation();\n//     }\n//   }, [latitude, longitude]);\n\n//   useEffect(() => {\n//     document.body.classList.toggle(\"dark-mode\", darkMode);\n//   }, [darkMode]);\n//   useEffect(() => {\n//     setIsGeolocationAvailable(!!navigator.geolocation);\n//   }, []);\n\n//   async function handleSearch(searchTerm) {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const weather = await fetchWeatherData(searchTerm, unit);\n//       setWeatherData(weather);\n//       const forecast = await fetchForecastData(searchTerm, unit);\n//       setForecastData(forecast);\n//       setLastSearched(searchTerm);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   async function handleGeolocation() {\n//     if (latitude && longitude) {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n//         setWeatherData(weather);\n//         const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n//         setForecastData(forecast);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   }\n\n//   function handleUnitToggle() {\n//     setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n//   }\n\n//   useEffect(() => {\n//     if (weatherData) {\n//       handleSearch(weatherData.name);\n//     }\n//   }, [unit]);\n\n//   return (\n//     <div className={`weather-app ${darkMode ? 'dark' : 'light'}`} style={{backgroundImage: `url(${bgImage})`}}>\n//       <motion.header\n//         initial={{ y: -50, opacity: 0 }}\n//         animate={{ y: 0, opacity: 1 }}\n//         transition={{ duration: 0.5 }}\n//       >\n//         <h1>Weather Insights</h1>\n//         <div className=\"header-buttons\">\n//           <motion.button\n//             className=\"mode-toggle\"\n//             onClick={() => setDarkMode(!darkMode)}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             {darkMode ? <FaSun /> : <FaMoon />}\n//           </motion.button>\n//           <motion.button\n//             className=\"unit-toggle\"\n//             onClick={handleUnitToggle}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             Switch to {unit === \"metric\" ? \"°F\" : \"°C\"}\n//           </motion.button>\n//         </div>\n//       </motion.header>\n//       <Search\n//         search={search}\n//         setSearch={setSearch}\n//         onSearch={handleSearch}\n//       />\n//       <motion.button\n//         className=\"geo-button\"\n//         onClick={handleGeolocation}\n//         disabled={!latitude || !longitude}\n//         whileHover={{ scale: 1.05 }}\n//         whileTap={{ scale: 0.95 }}\n//       >\n//         <FaMapMarkerAlt /> Use My Location\n//       </motion.button>\n//       <AnimatePresence>\n//         {loading && (\n//           <motion.div\n//             className=\"loading\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             Loading...\n//           </motion.div>\n//         )}\n//         {error && (\n//           <motion.div\n//             className=\"error\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             {error}\n//           </motion.div>\n//         )}\n//         {weatherData && !loading && !error && (\n//           <CurrentWeather data={weatherData} unit={unit} />\n//         )}\n//         {forecastData && !loading && !error && (\n//           <Forecast data={forecastData} unit={unit} />\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }\nimport React, { useEffect, useState } from \"react\";\nimport Search from \"../search\";\nimport CurrentWeather from \"../CurrentWeather\";\nimport Forecast from \"../Forecast\";\nimport { fetchWeatherData, fetchForecastData } from \"../api\";\nimport { useGeolocation } from \"../hooks/useGeolocation\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Weather() {\n  _s();\n  const [search, setSearch] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n  const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n  const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n  const [bgImage, setBgImage] = useState(\"\");\n  const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true);\n  const {\n    latitude,\n    longitude,\n    error: geoError,\n    getPosition\n  } = useGeolocation();\n  useEffect(() => {\n    // Set background image based on time of day\n    const hour = new Date().getHours();\n    if (hour >= 6 && hour < 20) {\n      setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n    } else {\n      setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n    }\n  }, []);\n  useEffect(() => {\n    setIsGeolocationAvailable(!!navigator.geolocation);\n  }, []);\n  useEffect(() => {\n    if (lastSearched) {\n      handleSearch(lastSearched);\n    } else if (latitude && longitude) {\n      handleGeolocation();\n    }\n  }, [latitude, longitude]);\n  useEffect(() => {\n    document.body.classList.toggle(\"dark-mode\", darkMode);\n  }, [darkMode]);\n  async function handleSearch(searchTerm) {\n    setLoading(true);\n    setError(null);\n    try {\n      const weather = await fetchWeatherData(searchTerm, unit);\n      setWeatherData(weather);\n      const forecast = await fetchForecastData(searchTerm, unit);\n      setForecastData(forecast);\n      setLastSearched(searchTerm);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function handleGeolocation() {\n    if (!isGeolocationAvailable) {\n      setError(\"Geolocation is not supported by your browser\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      await getPosition();\n      if (latitude && longitude) {\n        const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n        setWeatherData(weather);\n        const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n        setForecastData(forecast);\n      } else {\n        throw new Error(\"Unable to get your location\");\n      }\n    } catch (err) {\n      setError(err.message || \"Error fetching weather data\");\n    } finally {\n      setLoading(false);\n    }\n  }\n  function handleUnitToggle() {\n    setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n  }\n  useEffect(() => {\n    if (weatherData) {\n      handleSearch(weatherData.name);\n    }\n  }, [unit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `weather-app ${darkMode ? 'dark' : 'light'}`,\n    style: {\n      backgroundImage: `url(${bgImage})`\n    },\n    children: [/*#__PURE__*/_jsxDEV(motion.header, {\n      initial: {\n        y: -50,\n        opacity: 0\n      },\n      animate: {\n        y: 0,\n        opacity: 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather Insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(motion.button, {\n          className: \"mode-toggle\",\n          onClick: () => setDarkMode(!darkMode),\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          children: darkMode ? /*#__PURE__*/_jsxDEV(FaSun, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(FaMoon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(motion.button, {\n          className: \"unit-toggle\",\n          onClick: handleUnitToggle,\n          whileHover: {\n            scale: 1.1\n          },\n          whileTap: {\n            scale: 0.9\n          },\n          children: [\"Switch to \", unit === \"metric\" ? \"°F\" : \"°C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search,\n      setSearch: setSearch,\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.button, {\n      className: \"geo-button\",\n      onClick: handleGeolocation,\n      disabled: !isGeolocationAvailable,\n      whileHover: {\n        scale: 1.05\n      },\n      whileTap: {\n        scale: 0.95\n      },\n      children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), \" Use My Location\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: [loading && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"loading\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        exit: {\n          opacity: 0\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"error\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        exit: {\n          opacity: 0\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this), weatherData && !loading && !error && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n        data: weatherData,\n        unit: unit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), forecastData && !loading && !error && /*#__PURE__*/_jsxDEV(Forecast, {\n        data: forecastData,\n        unit: unit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(Weather, \"OF0xY5+xro10TImK17rjQWGcRwY=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useGeolocation];\n});\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","Search","CurrentWeather","Forecast","fetchWeatherData","fetchForecastData","useGeolocation","useLocalStorage","motion","AnimatePresence","FaSun","FaMoon","FaMapMarkerAlt","jsxDEV","_jsxDEV","Weather","_s","search","setSearch","loading","setLoading","error","setError","weatherData","setWeatherData","forecastData","setForecastData","unit","setUnit","darkMode","setDarkMode","lastSearched","setLastSearched","bgImage","setBgImage","isGeolocationAvailable","setIsGeolocationAvailable","latitude","longitude","geoError","getPosition","hour","Date","getHours","navigator","geolocation","handleSearch","handleGeolocation","document","body","classList","toggle","searchTerm","weather","forecast","err","message","Error","handleUnitToggle","prevUnit","name","className","style","backgroundImage","children","header","initial","y","opacity","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","whileHover","scale","whileTap","onSearch","disabled","div","exit","data","_c","$RefreshReg$"],"sources":["/home/vishnu/Desktop/Projects/react/weatherapp/src/components/weather/index.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import Search from \"../search\";\n// import CurrentWeather from \"../CurrentWeather\";\n// import Forecast from \"../Forecast\";\n// import { fetchWeatherData, fetchForecastData } from \"../api\";\n// import { useGeolocation } from \"../hooks/useGeolocation\";\n// import { useLocalStorage } from \"../hooks/useLocalStorage\";\n// import { motion, AnimatePresence } from \"framer-motion\";\n// import { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\n\n\n// export default function Weather() {\n//   const [search, setSearch] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [forecastData, setForecastData] = useState(null);\n//   const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n//   const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n//   const { latitude, longitude, error: geoError } = useGeolocation();\n//   const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n//   const [bgImage, setBgImage] = useState(\"\");\n//   const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true); \n//   useEffect(() => {\n//     // Set background image based on time of day\n//     const hour = new Date().getHours();\n//     if (hour >= 6 && hour < 20) {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n//     } else {\n//       setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     if (lastSearched) {\n//       handleSearch(lastSearched);\n//     } else if (latitude && longitude) {\n//       handleGeolocation();\n//     }\n//   }, [latitude, longitude]);\n\n//   useEffect(() => {\n//     document.body.classList.toggle(\"dark-mode\", darkMode);\n//   }, [darkMode]);\n//   useEffect(() => {\n//     setIsGeolocationAvailable(!!navigator.geolocation);\n//   }, []);\n  \n//   async function handleSearch(searchTerm) {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const weather = await fetchWeatherData(searchTerm, unit);\n//       setWeatherData(weather);\n//       const forecast = await fetchForecastData(searchTerm, unit);\n//       setForecastData(forecast);\n//       setLastSearched(searchTerm);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   async function handleGeolocation() {\n//     if (latitude && longitude) {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n//         setWeatherData(weather);\n//         const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n//         setForecastData(forecast);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     }\n//   }\n\n//   function handleUnitToggle() {\n//     setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n//   }\n\n//   useEffect(() => {\n//     if (weatherData) {\n//       handleSearch(weatherData.name);\n//     }\n//   }, [unit]);\n\n//   return (\n//     <div className={`weather-app ${darkMode ? 'dark' : 'light'}`} style={{backgroundImage: `url(${bgImage})`}}>\n//       <motion.header\n//         initial={{ y: -50, opacity: 0 }}\n//         animate={{ y: 0, opacity: 1 }}\n//         transition={{ duration: 0.5 }}\n//       >\n//         <h1>Weather Insights</h1>\n//         <div className=\"header-buttons\">\n//           <motion.button\n//             className=\"mode-toggle\"\n//             onClick={() => setDarkMode(!darkMode)}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             {darkMode ? <FaSun /> : <FaMoon />}\n//           </motion.button>\n//           <motion.button\n//             className=\"unit-toggle\"\n//             onClick={handleUnitToggle}\n//             whileHover={{ scale: 1.1 }}\n//             whileTap={{ scale: 0.9 }}\n//           >\n//             Switch to {unit === \"metric\" ? \"°F\" : \"°C\"}\n//           </motion.button>\n//         </div>\n//       </motion.header>\n//       <Search\n//         search={search}\n//         setSearch={setSearch}\n//         onSearch={handleSearch}\n//       />\n//       <motion.button\n//         className=\"geo-button\"\n//         onClick={handleGeolocation}\n//         disabled={!latitude || !longitude}\n//         whileHover={{ scale: 1.05 }}\n//         whileTap={{ scale: 0.95 }}\n//       >\n//         <FaMapMarkerAlt /> Use My Location\n//       </motion.button>\n//       <AnimatePresence>\n//         {loading && (\n//           <motion.div\n//             className=\"loading\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             Loading...\n//           </motion.div>\n//         )}\n//         {error && (\n//           <motion.div\n//             className=\"error\"\n//             initial={{ opacity: 0 }}\n//             animate={{ opacity: 1 }}\n//             exit={{ opacity: 0 }}\n//           >\n//             {error}\n//           </motion.div>\n//         )}\n//         {weatherData && !loading && !error && (\n//           <CurrentWeather data={weatherData} unit={unit} />\n//         )}\n//         {forecastData && !loading && !error && (\n//           <Forecast data={forecastData} unit={unit} />\n//         )}\n//       </AnimatePresence>\n//     </div>\n//   );\n// }\nimport React, { useEffect, useState } from \"react\";\nimport Search from \"../search\";\nimport CurrentWeather from \"../CurrentWeather\";\nimport Forecast from \"../Forecast\";\nimport { fetchWeatherData, fetchForecastData } from \"../api\";\nimport { useGeolocation } from \"../hooks/useGeolocation\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { FaSun, FaMoon, FaMapMarkerAlt } from \"react-icons/fa\";\n\nexport default function Weather() {\n  const [search, setSearch] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [unit, setUnit] = useLocalStorage(\"unit\", \"metric\");\n  const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\n  const [lastSearched, setLastSearched] = useLocalStorage(\"lastSearched\", \"\");\n  const [bgImage, setBgImage] = useState(\"\");\n  const [isGeolocationAvailable, setIsGeolocationAvailable] = useState(true);\n  const { latitude, longitude, error: geoError, getPosition } = useGeolocation();\n\n  useEffect(() => {\n    // Set background image based on time of day\n    const hour = new Date().getHours();\n    if (hour >= 6 && hour < 20) {\n      setBgImage(\"https://source.unsplash.com/1600x900/?sunny,day\");\n    } else {\n      setBgImage(\"https://source.unsplash.com/1600x900/?night,stars\");\n    }\n  }, []);\n\n  useEffect(() => {\n    setIsGeolocationAvailable(!!navigator.geolocation);\n  }, []);\n\n  useEffect(() => {\n    if (lastSearched) {\n      handleSearch(lastSearched);\n    } else if (latitude && longitude) {\n      handleGeolocation();\n    }\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    document.body.classList.toggle(\"dark-mode\", darkMode);\n  }, [darkMode]);\n\n  async function handleSearch(searchTerm) {\n    setLoading(true);\n    setError(null);\n    try {\n      const weather = await fetchWeatherData(searchTerm, unit);\n      setWeatherData(weather);\n      const forecast = await fetchForecastData(searchTerm, unit);\n      setForecastData(forecast);\n      setLastSearched(searchTerm);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleGeolocation() {\n    if (!isGeolocationAvailable) {\n      setError(\"Geolocation is not supported by your browser\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      await getPosition();\n      if (latitude && longitude) {\n        const weather = await fetchWeatherData(`${latitude},${longitude}`, unit);\n        setWeatherData(weather);\n        const forecast = await fetchForecastData(`${latitude},${longitude}`, unit);\n        setForecastData(forecast);\n      } else {\n        throw new Error(\"Unable to get your location\");\n      }\n    } catch (err) {\n      setError(err.message || \"Error fetching weather data\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function handleUnitToggle() {\n    setUnit(prevUnit => prevUnit === \"metric\" ? \"imperial\" : \"metric\");\n  }\n\n  useEffect(() => {\n    if (weatherData) {\n      handleSearch(weatherData.name);\n    }\n  }, [unit]);\n\n  return (\n    <div className={`weather-app ${darkMode ? 'dark' : 'light'}`} style={{backgroundImage: `url(${bgImage})`}}>\n      <motion.header\n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <h1>Weather Insights</h1>\n        <div className=\"header-buttons\">\n          <motion.button\n            className=\"mode-toggle\"\n            onClick={() => setDarkMode(!darkMode)}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            {darkMode ? <FaSun /> : <FaMoon />}\n          </motion.button>\n          <motion.button\n            className=\"unit-toggle\"\n            onClick={handleUnitToggle}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            Switch to {unit === \"metric\" ? \"°F\" : \"°C\"}\n          </motion.button>\n        </div>\n      </motion.header>\n      <Search\n        search={search}\n        setSearch={setSearch}\n        onSearch={handleSearch}\n      />\n      <motion.button\n        className=\"geo-button\"\n        onClick={handleGeolocation}\n        disabled={!isGeolocationAvailable}\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n      >\n        <FaMapMarkerAlt /> Use My Location\n      </motion.button>\n      <AnimatePresence>\n        {loading && (\n          <motion.div\n            className=\"loading\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            Loading...\n          </motion.div>\n        )}\n        {error && (\n          <motion.div\n            className=\"error\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            {error}\n          </motion.div>\n        )}\n        {weatherData && !loading && !error && (\n          <CurrentWeather data={weatherData} unit={unit} />\n        )}\n        {forecastData && !loading && !error && (\n          <Forecast data={forecastData} unit={unit} />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,QAAQ;AAC5D,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,MAAM,EAAEC,eAAe,QAAQ,eAAe;AACvD,SAASC,KAAK,EAAEC,MAAM,EAAEC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2B,IAAI,EAAEC,OAAO,CAAC,GAAGrB,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC;EACzD,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,eAAe,CAAC,UAAU,EAAE,KAAK,CAAC;EAClE,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,eAAe,CAAC,cAAc,EAAE,EAAE,CAAC;EAC3E,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmC,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAC1E,MAAM;IAAEqC,QAAQ;IAAEC,SAAS;IAAEjB,KAAK,EAAEkB,QAAQ;IAAEC;EAAY,CAAC,GAAGlC,cAAc,CAAC,CAAC;EAE9EP,SAAS,CAAC,MAAM;IACd;IACA,MAAM0C,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAClC,IAAIF,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,EAAE,EAAE;MAC1BP,UAAU,CAAC,iDAAiD,CAAC;IAC/D,CAAC,MAAM;MACLA,UAAU,CAAC,mDAAmD,CAAC;IACjE;EACF,CAAC,EAAE,EAAE,CAAC;EAENnC,SAAS,CAAC,MAAM;IACdqC,yBAAyB,CAAC,CAAC,CAACQ,SAAS,CAACC,WAAW,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;EAEN9C,SAAS,CAAC,MAAM;IACd,IAAIgC,YAAY,EAAE;MAChBe,YAAY,CAACf,YAAY,CAAC;IAC5B,CAAC,MAAM,IAAIM,QAAQ,IAAIC,SAAS,EAAE;MAChCS,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACV,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAEzBvC,SAAS,CAAC,MAAM;IACdiD,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEtB,QAAQ,CAAC;EACvD,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,eAAeiB,YAAYA,CAACM,UAAU,EAAE;IACtChC,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAM+B,OAAO,GAAG,MAAMjD,gBAAgB,CAACgD,UAAU,EAAEzB,IAAI,CAAC;MACxDH,cAAc,CAAC6B,OAAO,CAAC;MACvB,MAAMC,QAAQ,GAAG,MAAMjD,iBAAiB,CAAC+C,UAAU,EAAEzB,IAAI,CAAC;MAC1DD,eAAe,CAAC4B,QAAQ,CAAC;MACzBtB,eAAe,CAACoB,UAAU,CAAC;IAC7B,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZjC,QAAQ,CAACiC,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRpC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF;EAEA,eAAe2B,iBAAiBA,CAAA,EAAG;IACjC,IAAI,CAACZ,sBAAsB,EAAE;MAC3Bb,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;IAEAF,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMkB,WAAW,CAAC,CAAC;MACnB,IAAIH,QAAQ,IAAIC,SAAS,EAAE;QACzB,MAAMe,OAAO,GAAG,MAAMjD,gBAAgB,CAAC,GAAGiC,QAAQ,IAAIC,SAAS,EAAE,EAAEX,IAAI,CAAC;QACxEH,cAAc,CAAC6B,OAAO,CAAC;QACvB,MAAMC,QAAQ,GAAG,MAAMjD,iBAAiB,CAAC,GAAGgC,QAAQ,IAAIC,SAAS,EAAE,EAAEX,IAAI,CAAC;QAC1ED,eAAe,CAAC4B,QAAQ,CAAC;MAC3B,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;MAChD;IACF,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZjC,QAAQ,CAACiC,GAAG,CAACC,OAAO,IAAI,6BAA6B,CAAC;IACxD,CAAC,SAAS;MACRpC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF;EAEA,SAASsC,gBAAgBA,CAAA,EAAG;IAC1B9B,OAAO,CAAC+B,QAAQ,IAAIA,QAAQ,KAAK,QAAQ,GAAG,UAAU,GAAG,QAAQ,CAAC;EACpE;EAEA5D,SAAS,CAAC,MAAM;IACd,IAAIwB,WAAW,EAAE;MACfuB,YAAY,CAACvB,WAAW,CAACqC,IAAI,CAAC;IAChC;EACF,CAAC,EAAE,CAACjC,IAAI,CAAC,CAAC;EAEV,oBACEb,OAAA;IAAK+C,SAAS,EAAE,eAAehC,QAAQ,GAAG,MAAM,GAAG,OAAO,EAAG;IAACiC,KAAK,EAAE;MAACC,eAAe,EAAE,OAAO9B,OAAO;IAAG,CAAE;IAAA+B,QAAA,gBACxGlD,OAAA,CAACN,MAAM,CAACyD,MAAM;MACZC,OAAO,EAAE;QAAEC,CAAC,EAAE,CAAC,EAAE;QAAEC,OAAO,EAAE;MAAE,CAAE;MAChCC,OAAO,EAAE;QAAEF,CAAC,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAE,CAAE;MAC9BE,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE;MAAAP,QAAA,gBAE9BlD,OAAA;QAAAkD,QAAA,EAAI;MAAgB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB7D,OAAA;QAAK+C,SAAS,EAAC,gBAAgB;QAAAG,QAAA,gBAC7BlD,OAAA,CAACN,MAAM,CAACoE,MAAM;UACZf,SAAS,EAAC,aAAa;UACvBgB,OAAO,EAAEA,CAAA,KAAM/C,WAAW,CAAC,CAACD,QAAQ,CAAE;UACtCiD,UAAU,EAAE;YAAEC,KAAK,EAAE;UAAI,CAAE;UAC3BC,QAAQ,EAAE;YAAED,KAAK,EAAE;UAAI,CAAE;UAAAf,QAAA,EAExBnC,QAAQ,gBAAGf,OAAA,CAACJ,KAAK;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAAG7D,OAAA,CAACH,MAAM;YAAA6D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eAChB7D,OAAA,CAACN,MAAM,CAACoE,MAAM;UACZf,SAAS,EAAC,aAAa;UACvBgB,OAAO,EAAEnB,gBAAiB;UAC1BoB,UAAU,EAAE;YAAEC,KAAK,EAAE;UAAI,CAAE;UAC3BC,QAAQ,EAAE;YAAED,KAAK,EAAE;UAAI,CAAE;UAAAf,QAAA,GAC1B,YACW,EAACrC,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI;QAAA;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAChB7D,OAAA,CAACb,MAAM;MACLgB,MAAM,EAAEA,MAAO;MACfC,SAAS,EAAEA,SAAU;MACrB+D,QAAQ,EAAEnC;IAAa;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF7D,OAAA,CAACN,MAAM,CAACoE,MAAM;MACZf,SAAS,EAAC,YAAY;MACtBgB,OAAO,EAAE9B,iBAAkB;MAC3BmC,QAAQ,EAAE,CAAC/C,sBAAuB;MAClC2C,UAAU,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAE;MAC5BC,QAAQ,EAAE;QAAED,KAAK,EAAE;MAAK,CAAE;MAAAf,QAAA,gBAE1BlD,OAAA,CAACF,cAAc;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,oBACpB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,eAChB7D,OAAA,CAACL,eAAe;MAAAuD,QAAA,GACb7C,OAAO,iBACNL,OAAA,CAACN,MAAM,CAAC2E,GAAG;QACTtB,SAAS,EAAC,SAAS;QACnBK,OAAO,EAAE;UAAEE,OAAO,EAAE;QAAE,CAAE;QACxBC,OAAO,EAAE;UAAED,OAAO,EAAE;QAAE,CAAE;QACxBgB,IAAI,EAAE;UAAEhB,OAAO,EAAE;QAAE,CAAE;QAAAJ,QAAA,EACtB;MAED;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CACb,EACAtD,KAAK,iBACJP,OAAA,CAACN,MAAM,CAAC2E,GAAG;QACTtB,SAAS,EAAC,OAAO;QACjBK,OAAO,EAAE;UAAEE,OAAO,EAAE;QAAE,CAAE;QACxBC,OAAO,EAAE;UAAED,OAAO,EAAE;QAAE,CAAE;QACxBgB,IAAI,EAAE;UAAEhB,OAAO,EAAE;QAAE,CAAE;QAAAJ,QAAA,EAEpB3C;MAAK;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CACb,EACApD,WAAW,IAAI,CAACJ,OAAO,IAAI,CAACE,KAAK,iBAChCP,OAAA,CAACZ,cAAc;QAACmF,IAAI,EAAE9D,WAAY;QAACI,IAAI,EAAEA;MAAK;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACjD,EACAlD,YAAY,IAAI,CAACN,OAAO,IAAI,CAACE,KAAK,iBACjCP,OAAA,CAACX,QAAQ;QAACkF,IAAI,EAAE5D,YAAa;QAACE,IAAI,EAAEA;MAAK;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC5C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV;AAAC3D,EAAA,CAlKuBD,OAAO;EAAA,QAMLR,eAAe,EACPA,eAAe,EACPA,eAAe,EAGOD,cAAc;AAAA;AAAAgF,EAAA,GAXtDvE,OAAO;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}