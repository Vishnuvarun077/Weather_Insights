{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState } from \"react\";\n\n// export function useGeolocation() {\n//   const [latitude, setLatitude] = useState(null);\n//   const [longitude, setLongitude] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   const getPosition = () => {\n//     return new Promise((resolve, reject) => {\n//       if (!navigator.geolocation) {\n//         reject(new Error(\"Geolocation is not supported by your browser\"));\n//       } else {\n//         navigator.geolocation.getCurrentPosition(\n//           (position) => {\n//             setLatitude(position.coords.latitude);\n//             setLongitude(position.coords.longitude);\n//             resolve(position);\n//           },\n//           (err) => {\n//             setError(err.message);\n//             reject(err);\n//           }\n//         );\n//       }\n//     });\n//   };\n\n//   return { latitude, longitude, error, getPosition };\n// }\n\nimport { useState, useEffect } from \"react\";\nexport function useGeolocation() {\n  _s();\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const getPosition = () => {\n    setIsLoading(true);\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        setError(\"Geolocation is not supported by your browser\");\n        setIsLoading(false);\n        reject(new Error(\"Geolocation is not supported by your browser\"));\n      } else {\n        navigator.geolocation.getCurrentPosition(position => {\n          setLatitude(position.coords.latitude);\n          setLongitude(position.coords.longitude);\n          setIsLoading(false);\n          resolve(position);\n        }, err => {\n          setError(err.message);\n          setIsLoading(false);\n          reject(err);\n        });\n      }\n    });\n  };\n  useEffect(() => {\n    getPosition();\n  }, []);\n  return {\n    latitude,\n    longitude,\n    error,\n    isLoading,\n    getPosition\n  };\n}\n_s(useGeolocation, \"fbUcN3LpOTrmBRRQo2Mc04VfEvg=\");","map":{"version":3,"names":["useState","useEffect","useGeolocation","_s","latitude","setLatitude","longitude","setLongitude","error","setError","isLoading","setIsLoading","getPosition","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","coords","err","message"],"sources":["/home/vishnu/Desktop/Projects/react/weatherapp/src/components/hooks/useGeolocation.jsx"],"sourcesContent":["// import { useState } from \"react\";\n\n// export function useGeolocation() {\n//   const [latitude, setLatitude] = useState(null);\n//   const [longitude, setLongitude] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   const getPosition = () => {\n//     return new Promise((resolve, reject) => {\n//       if (!navigator.geolocation) {\n//         reject(new Error(\"Geolocation is not supported by your browser\"));\n//       } else {\n//         navigator.geolocation.getCurrentPosition(\n//           (position) => {\n//             setLatitude(position.coords.latitude);\n//             setLongitude(position.coords.longitude);\n//             resolve(position);\n//           },\n//           (err) => {\n//             setError(err.message);\n//             reject(err);\n//           }\n//         );\n//       }\n//     });\n//   };\n\n//   return { latitude, longitude, error, getPosition };\n// }\n\nimport { useState, useEffect } from \"react\";\n\nexport function useGeolocation() {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getPosition = () => {\n    setIsLoading(true);\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        setError(\"Geolocation is not supported by your browser\");\n        setIsLoading(false);\n        reject(new Error(\"Geolocation is not supported by your browser\"));\n      } else {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            setLatitude(position.coords.latitude);\n            setLongitude(position.coords.longitude);\n            setIsLoading(false);\n            resolve(position);\n          },\n          (err) => {\n            setError(err.message);\n            setIsLoading(false);\n            reject(err);\n          }\n        );\n      }\n    });\n  };\n\n  useEffect(() => {\n    getPosition();\n  }, []);\n\n  return { latitude, longitude, error, isLoading, getPosition };\n}"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBD,YAAY,CAAC,IAAI,CAAC;IAClB,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACC,SAAS,CAACC,WAAW,EAAE;QAC1BR,QAAQ,CAAC,8CAA8C,CAAC;QACxDE,YAAY,CAAC,KAAK,CAAC;QACnBI,MAAM,CAAC,IAAIG,KAAK,CAAC,8CAA8C,CAAC,CAAC;MACnE,CAAC,MAAM;QACLF,SAAS,CAACC,WAAW,CAACE,kBAAkB,CACrCC,QAAQ,IAAK;UACZf,WAAW,CAACe,QAAQ,CAACC,MAAM,CAACjB,QAAQ,CAAC;UACrCG,YAAY,CAACa,QAAQ,CAACC,MAAM,CAACf,SAAS,CAAC;UACvCK,YAAY,CAAC,KAAK,CAAC;UACnBG,OAAO,CAACM,QAAQ,CAAC;QACnB,CAAC,EACAE,GAAG,IAAK;UACPb,QAAQ,CAACa,GAAG,CAACC,OAAO,CAAC;UACrBZ,YAAY,CAAC,KAAK,CAAC;UACnBI,MAAM,CAACO,GAAG,CAAC;QACb,CACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdW,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAER,QAAQ;IAAEE,SAAS;IAAEE,KAAK;IAAEE,SAAS;IAAEE;EAAY,CAAC;AAC/D;AAACT,EAAA,CApCeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}